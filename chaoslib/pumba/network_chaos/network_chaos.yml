---
  - block: 
  
      - block: 
  
          - name: Select the app pod
            shell: >
              kubectl get pod -l {{ a_label }} -n {{ a_ns }}
              -o=custom-columns=:metadata.name --no-headers
              | shuf | head -1 
            args:
              executable: /bin/bash
            register: app_pod_name
    
          - name: Record app pod name
            set_fact:
              app_pod: "{{ app_pod_name.stdout }}"
    
        when: "app_pod is not defined or app_pod == ''"
  
      # here app_ns is the namespace of pod on which we are performing network loss/delay
      # in genric experiments app_ns is same as a_ns
      # in openebs experiments app_ns is the namespace where openebs is installed i.e, openebs
      - name: Identify the application node
        shell: >
          kubectl get pod {{ app_pod }} -n {{ app_ns }}
          --no-headers -o custom-columns=:spec.nodeName
        args:
          executable: /bin/bash
        register: app_node
  
      - set_fact: 
          app_node: "{{ app_node.stdout }}"
  
      - block: 
          - name: Generate a run id if not passed from the engine/experiment
            shell: echo $(mktemp) | cut -d '.' -f 2 | cut -c -6
            register: rand_string   
  
          - set_fact:
              run_id: "{{ rand_string.stdout | lower }}"
        when: "run_id is not defined or run_id == ''"
  
      - block:
  
          - name: Record the application container
            shell: >
              kubectl get pods -n {{ app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ app_pod }}")].spec.containers[0].name}'
            args:
              executable: /bin/bash
            register: container
    
          - name: Record the app_container
            set_fact:
              c_container: "{{ container.stdout }}"
    
        when: c_container is not defined or c_container == ''
  
      - name: Wait for the specified ramp time before injecting chaos
        ## the ramp_time is spent before launching the pumba job instead 
        ## of in the pumba job, as with the new scratch-based pumba images
        ## there is no shell available by default
        wait_for: timeout="{{ ramp_time }}"
        when: "ramp_time is defined and ramp_time != ''"
      
      - name: Patch the chaoslib image
        template:
          src:  /chaoslib/pumba/network_chaos/pumba_netem_job.j2
          dest: /chaoslib/pumba/network_chaos/pumba_kube.yml
        vars:
          pumba_image: "{{ lib_image }}"

      ## RECORD EVENT FOR CHAOS INJECTION
      - include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
        vars:
          stage: "ChaosInject"
          exp_pod_name: "{{ chaos_pod_name }}"
          engine_ns: "{{ c_ns }}"
          message: "Injecting {{ c_experiment }} chaos on {{ app_pod }} pod"
        when: "c_engine is defined and c_engine != ''"

      # Setting pod_running_status to nil
      - set_fact: 
          pod_running_status: ""

       # Pumba pods creation is attempted for a total of 3 times, if it is not immediately schedulable due to transient node conditions
       # If the pumba pod is not schedulable across these 3 tries, the experiment is failed with message indicating improper cluster state.
      - include_tasks: /utils/common/create_chaos_pod.yml
        vars:
          pod_ns: "{{ c_ns }}"
          c_path: "/chaoslib/pumba/network_chaos/pumba_kube.yml"
          pod_label: "name=pumba-netem-{{ run_id }}"
        with_sequence: start=1 end=3

      # Failing the execution, If pumba pod won't come to running state after three retries.
      - fail:
          msg: "pod_failure_by_sigkill lib failed, Unable to create as pumba couldn't be scheduled on the {{ app_node }} node"
        when: "pod_running_status is not defined or pod_running_status != 'Running'"
  
      - name: Wait until the pumba netem pod is completed
        shell: >
          kubectl get pods -l name=pumba-netem-{{ run_id }} --no-headers -n {{ c_ns }}
          --no-headers -o custom-columns=:status.phase
        args: 
          executable: /bin/bash
        register: result
        until: "result.stdout == 'Succeeded'"
        delay: 1
        ## with a grace period of 1 min before pumba terminate
        retries: "{{ ((c_duration|int) + 60)| int }}"
  
      - name: Wait for the specified ramp time after injecting chaos
        wait_for: timeout="{{ ramp_time }}"
        when: "ramp_time is defined and ramp_time != ''" 

      - block:
  
          - name: Tear down pumba infrastructure
            shell: >
              kubectl delete -f /chaoslib/pumba/network_chaos/pumba_kube.yml -n {{ c_ns }} 
            args:
              executable: /bin/bash
  
          - name: Confirm that the pumba pod is deleted successfully
            shell: >
              kubectl get pods -l name=pumba-netem-{{ run_id }} --no-headers -n {{ c_ns }}
            args:
              executable: /bin/bash
            register: result
            until: "'No resources found' in result.stderr"
            delay: 2
            retries: 90

        when: "pod_running_status is defined and pod_running_status == 'Running'"
  
    rescue: 
  
      - block: 
  
          - name: Tear down pumba infrastructure, if setup
            shell: >
              kubectl delete -f /chaoslib/pumba/network_chaos/pumba_kube.yml -n {{ c_ns }} 
            args:
              executable: /bin/bash
            when: chaos_pod_result.rc == 0
          
          - name: Confirm that the pumba pod is not present
            shell: >
              kubectl get pods -l name=pumba-netem-{{ run_id }} --no-headers -n {{ c_ns }}
            args:
              executable: /bin/bash
            register: result
            until: "'No resources found' in result.stderr"
            delay: 2
            retries: 90
        when: "(pod_running_status is defined and pod_running_status == 'Running') and chaos_pod_result is defined"
  
      - fail:
          msg: "network_chaos lib failed"
        when: true