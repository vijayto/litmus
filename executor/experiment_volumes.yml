- block:

  - set_fact:
      c_map_details: {}

  - name: Obtain the configmap param length from spec of experiment
    shell: >
      kubectl get chaosexperiment {{ c_experiment_name }} -n {{ c_app_ns }} -o json
      | jq '.spec.definition.configmaps | length'
    args:
      executable: /bin/bash
    register: c_map_length_experiment

  - include: experiment_configmap_getter.yml
    with_sequence: start=0 count="{{ c_map_length_experiment.stdout | int }}"

  - name: Obtain the configmap param length from spec of engine
    shell: >
      kubectl get chaosengine {{ c_engine }} -n {{ c_app_ns }} -o json | jq '.spec.experiments[] | select(.name == "{{ c_experiment_name }}") | .spec.components.configMaps | length'
    args:
      executable: /bin/bash
    register: c_map_length_engine

  - include: engine_configmap_getter.yml
    with_sequence: start=0 count="{{ c_map_length_engine.stdout | int }}"

  - name: validate configmap present inside cluster or not.
    shell: >
      kubectl get configmaps -n {{ c_app_ns }} --no-headers -o=custom-columns=NAME:".metadata.name"
    args:
      executable: /bin/bash
    register: config_present

  - name: Check existence of config map
    fail:
      msg: "config map {{ item.key }} doesn't exist in cluster"
    when: item.key not in config_present.stdout_lines
    with_dict: "{{ c_map_details }}"

  when: configMap_defined_experiment != '' or configMap_defined_engine != ''
  
- block:

  - set_fact:
      secret_details: {}

  - name: Obtain the secret param length from spec of experiment
    shell: >
      kubectl get chaosexperiment {{ c_experiment_name }} -n {{ c_app_ns }} -o json
      | jq '.spec.definition.secrets | length'
    args:
      executable: /bin/bash
    register: secret_length_experiment
  
  - include: experiment_secret_getter.yml
    with_sequence: start=0 count="{{ secret_length_experiment.stdout | int }}"
  
  - name: Obtain the secret param length from spec of engine
    shell: >
      kubectl get chaosengine {{ c_engine }} -n {{ c_app_ns }} -o json | jq '.spec.experiments[] | select(.name == "{{ c_experiment_name }}") | .spec.components.secrets | length'
    args:
      executable: /bin/bash
    register: secret_length_engine
  
  - include: engine_secret_getter.yml
    with_sequence: start=0 count="{{ secret_length_engine.stdout | int }}"

  - name: validate secrets present inside cluster or not.
    shell: >
      kubectl get secrets -n {{ c_app_ns }} --no-headers -o=custom-columns=NAME:".metadata.name"
    args:
      executable: /bin/bash
    register: secret_present

  - name: Check existence of secrets
    fail:
      msg: "secret {{ item.key }} doesn't exist in cluster"
    when: item.key not in secret_present.stdout_lines
    with_dict: "{{ secret_details }}"
  
  when: secret_defined_experiment != '' or  secret_defined_engine != ''

- name: Get the job yaml
  shell:
    kubectl run {{ c_experiment_name }}-{{random_string.stdout}} --restart=OnFailure --image={{c_image.stdout}}
    --namespace={{c_app_ns}} --serviceaccount={{ c_svc_acc }} --image-pull-policy=Always 
    --labels={{c_job_labels.stdout}} {{c_env_list}} --dry-run -oyaml --command -- /bin/bash {{c_job_args.stdout}} > cjob.yml
  args:
    executable: /bin/bash

- block:

  - name: Include the volumeMounts in jobYml - configmap 
    lineinfile:
      dest: cjob.yml
      insertafter: "resources: {}"
      state: present
      line: '        volumeMounts:'

  - name: Include the volumes in jobYml  - configmap 
    lineinfile:
      dest: cjob.yml
      insertafter: "restartPolicy:"
      state: present
      line: '      volumes:'

  - include: volumePatcher.yml
    vars:
      configName: "{{ item.key }}"
      mountPathConfigMap: "{{ item.value }}"
      executeBlock: "config_map"
    with_dict: "{{ c_map_details }}"

  when: configMap_defined_experiment != '' or configMap_defined_engine != ''

- block:

  - name: Include the volumeMounts in jobYml  - secret
    lineinfile:
      dest: cjob.yml
      insertafter: "resources: {}"
      state: present
      line: '        volumeMounts:'

  - name: Include the volumes in jobYml   - secret
    lineinfile:
      dest: cjob.yml
      insertafter: "restartPolicy:"
      state: present
      line: '      volumes:'
    
  - include: volumePatcher.yml
    vars: 
      secretName: "{{ item.key }}"
      mountPathSecret: "{{ item.value }}"
      executeBlock: "secret"
    with_dict: "{{ secret_details }}"

  when: secret_defined_experiment != '' or secret_defined_engine != ''

- name: create job
  shell:
    kubectl create -f cjob.yml -n {{c_app_ns}} 
  args:
    executable: /bin/bash
