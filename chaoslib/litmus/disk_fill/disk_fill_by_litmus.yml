- block:
  
    - name: Get a Random Pod name
      shell: >
        kubectl get pods -l {{ a_label }} -n {{ a_ns }} --no-headers -o custom-columns=:metadata.name | shuf -n 1 
      args:
        executable: /bin/bash
      register: pod_name

    - name: Get ephemeral-storage Limit Value
      shell: >
        kubectl get pods {{ pod_name.stdout }} -n {{ a_ns }} -o jsonpath='{.spec.containers[?(@.name=="{{ c_container }}")].resources.limits.ephemeral-storage}' | grep -Eo '+|[0-9]+'
      args:
        executable: /bin/bash
      register: limit_value

    - name: Get ephemeral-storage Limit storage unit
      shell: >
        kubectl get pods {{ pod_name.stdout }} -n {{ a_ns }} -o jsonpath='{.spec.containers[?(@.name=="{{ c_container }}")].resources.limits.ephemeral-storage}' | grep -Eo '[[:alpha:]]+'
      args:
        executable: /bin/bash
      register: limit_value_storage

    - name: Get ephemeral-storage Request Value
      shell: >
        kubectl get pods {{ pod_name.stdout }} -n {{ a_ns }} -o jsonpath='{.spec.containers[?(@.name=="{{ c_container }}")].resources.requests.ephemeral-storage}' | grep -Eo '+|[0-9]+'
      args:
        executable: /bin/bash
      register: req_value

    - name: Get ephemeral-storage Request storage unit
      shell: >
        kubectl get pods {{ pod_name.stdout }} -n {{ a_ns }} -o jsonpath='{.spec.containers[?(@.name=="{{ c_container }}")].resources.requests.ephemeral-storage}' | grep -Eo '[[:alpha:]]+'
      args:
        executable: /bin/bash
      register: req_value_storage

    - name: Fetch the value of Request ephemeral-storage Unit in KB
      set_fact:
        req_storage_KB: "{{ lookup('vars', req_value_storage.stdout) }}"

    - name: Fetch the value of Limit ephemeral-storage Unit in KB
      set_fact:
        limit_storage_KB: "{{ lookup('vars', limit_value_storage.stdout) }}"

    - include_tasks: /chaoslib/litmus/disk_fill/convert_fill_percentage.yml
    
    - block:
        - name: Generate a run id if not passed from the engine/experiment
          shell: echo $(mktemp) | cut -d '.' -f 2 | cut -c -6
          register: rand_string   

        - set_fact:
            run_id: "{{ rand_string.stdout | lower }}"
      when: "run_id is not defined or run_id == ''"

    - name: Get the Container ID
      shell: >
        kubectl get pods {{ pod_name.stdout }} -n {{ a_ns }} -o jsonpath='{.status.containerStatuses[?(@.name=="{{ c_container }}")].containerID}' | awk -F'//' '{print $2}'
      args:
        executable: /bin/bash
      register: containerID

    - name: Identify the application node
      shell: >
        kubectl get pods {{ pod_name.stdout }} -n {{ a_ns }} --no-headers -o custom-columns=:spec.nodeName
      args:
        executable: /bin/bash
      register: app_node

    - set_fact: 
        app_node: "{{ app_node.stdout }}"

    - name: Patch the engine UID and node name 
      template:
        src:  /chaoslib/litmus/disk_fill/disk_fill_pod.j2
        dest: /chaoslib/litmus/disk_fill/disk_fill_pod.yml
        
    ## RECORD EVENT FOR CHAOS INJECTION
    - include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
      vars:
        stage: "ChaosInject"
        exp_pod_name: "{{ chaos_pod_name }}"
        engine_ns: "{{ c_ns }}"
        message: "Injecting {{ c_experiment }} chaos on {{ pod_name.stdout }}"
      when: "c_engine is defined and c_engine != ''"

    # Setting pod_running_status to nil
    - set_fact: 
        pod_running_status: ""
        
     # Disk Fill pods creation is attempted for a total of 3 times, if it is not immediately schedulable due to transient node conditions
     # If the disk-fill pod is not schedulable across these 3 tries, the experiment is failed with message indicating improper cluster state.
    - include_tasks: /utils/common/create_chaos_pod.yml
      vars:
        pod_ns: "{{ a_ns }}"
        c_path: "/chaoslib/litmus/disk_fill/disk_fill_pod.yml"
        pod_label: "name=disk-fill-{{ run_id }}"
      with_sequence: start=1 end=3

    # Failing the execution, If disk-fill pod won't come to running state after three retries.
    - fail:
        msg: "disk_fill_by_litmus lib failed, Unable to create as disk-fill pod couldn't be scheduled on the {{ app_node }} node"
      when: "pod_running_status is not defined or pod_running_status != 'Running'"

    - name: Wait for the specified ramp time before injecting chaos
      wait_for: timeout="{{ ramp_time }}"
      when: "ramp_time is defined and ramp_time != ''"
  
    - name: Record the disk-fill pod on app node
      shell: >
        kubectl get pods -l name=disk-fill-{{ run_id }} -n {{ a_ns }} -o jsonpath='{.items[?(@.spec.nodeName=="{{ app_node }}")].metadata.name}'
      args:
        executable: /bin/bash
      register: disk_fill_pod

    - name: Exec into the pod to get ephemeral-storage size
      shell: >
        kubectl exec -it {{ disk_fill_pod.stdout }} -n {{ c_ns }} -- sh -c "cd /diskfill && cd {{ containerID.stdout }} && du -k |tail -n1 | awk '{print $1}'"
      args:
        executable: /bin/bash
      register: pod_current_size_full

    - name: Echo the filled storage in KB to get the integer part for multiplication
      shell: >
        echo {{ pod_current_size_full.stdout }} | grep -Eo '+|[0-9]+'
      args:
        executable: /bin/bash
      register: pod_current_size

    - name: Total Used Ephemeral Storage in KB
      set_fact:
        used_storage: "{{ pod_current_size.stdout }}"
  
    - name: Subtract to get the file allocation size
      set_fact:
        fill_storage: "{{ to_fill|int - used_storage|int }}"

    - include_tasks: /chaoslib/litmus/disk_fill/file_creation.yml

    - name: Waiting for Chaos Duration
      wait_for:
        timeout: "{{ c_duration }}"

    - name: Get the Pod Status 
      shell: >
        kubectl get pod {{ pod_name.stdout }} -n {{ a_ns }} -o jsonpath='{.status.phase}'
      args:
        executable: /bin/bash
      register: pod_status

    - name: Check if the pod is Evicted
      shell: >
        kubectl get pod {{ pod_name.stdout }} -n {{ a_ns }} -o jsonpath='{.status.reason}'
      args:
        executable: /bin/bash
      register: eviction_status

    - name: Delete Pod if evicted
      shell: >
        kubectl delete pod {{ pod_name.stdout }} -n {{ a_ns }}
      when: eviction_status.stdout == "Evicted"

    - name: If Pod is not evicted / running
      shell: >
        kubectl exec -it {{ disk_fill_pod.stdout }} -n {{ c_ns }} -- sh -c "rm -rf /diskfill/{{ containerID.stdout }}/diskfill"
      when: pod_status.stdout == "Running"

    - name: Wait for the specified ramp time after injecting chaos
      wait_for: timeout="{{ ramp_time }}"
      when: "ramp_time is defined and ramp_time != ''" 

    - block:

        ## DELETING THE DISK FILL POD
        - name: Deleting the Disk Fill Pod
          shell: kubectl delete -f /chaoslib/litmus/disk_fill/disk_fill_pod.yml -n {{ c_ns }}
          args:
            executable: /bin/bash

        - name: Confirm that the Disk Fill Pod is deleted successfully
          k8s_facts:
            kind: Pod
            namespace: "{{ c_ns }}"
            label_selectors:
              - name=disk-fill-{{ run_id }}
          register: resource_pod
          until: "resource_pod.resources | length < 1"
          delay: 2
          retries: 90

      when: "pod_running_status is defined and pod_running_status == 'Running'"

  rescue: 

    - block: 
    
        - name: Deleting the Disk-fill Pod
          shell: >
            kubectl delete -f /chaoslib/litmus/disk_fill/disk_fill_pod.yml -n {{ c_ns }}
          args:
            executable: /bin/bash
          when: "chaos_pod_result.rc == 0 "
    
        - name: Confirm that the Disk Fill Pod is deleted successfully
          k8s_facts:
            kind: Pod
            namespace: "{{ c_ns }}"
            label_selectors:
              - name=disk-fill-{{ run_id }}
          register: resource_pod
          until: "resource_pod.resources | length < 1"
          delay: 2
          retries: 90   

      when: "(pod_running_status is defined and pod_running_status == 'Running') and chaos_pod_result is defined"
    
    - fail:
        msg: "disk_fill_by_litmus lib failed"
      when: true
