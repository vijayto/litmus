---
- name: Verify if ChaosExperiment CR is available 
  shell: >
    kubectl get chaosexperiment {{ c_experiment_name }} -n {{ c_app_ns }}
    --no-headers -o custom-columns=:metadata.name
  args:
    executable: /bin/bash
  register: c_exp_name
  failed_when: "c_experiment_name not in c_exp_name.stdout"

- name: check availabilty of experimentStatuses
  shell: >
    kubectl get chaosengine -n {{ c_app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ c_engine }}")].status.experimentStatuses}'
  args:
    executable: /bin/bash
  register: experimentStatus_available

#- name: Derive chaos job path from spec of experiment
#  shell: >
#    kubectl get chaosexperiment {{ c_experiment_name }}
#    --no-headers -o custom-columns=:spec.definition.litmusbook
##  args:
#   executable: /bin/bash
#  register: c_job

#- name: Replace the service account on the litmusbook
#  replace:
#    path: "{{ c_job.stdout }}"
#    regexp: 'CHAOS_SERVICE_ACCOUNT'
#    replace: "{{ c_svc_acc }}" 

- name: Obtain the env param list length from spec of experiment
  shell: >
    kubectl get chaosexperiment {{ c_experiment_name }} -n {{ c_app_ns }} -o json
    | jq '.spec.definition.env | length'
  args:
    executable: /bin/bash
  register: c_env_length

- set_fact:
    envNameList: ["APP_NAMESPACE", "APP_LABEL", "APP_KIND", "CHAOSENGINE","AUXILIARY_APPINFO"]
    envValueList: ["{{ c_app_ns }}", "{{ c_app_label }}", "{{ c_app_kind }}", "{{ c_engine }}", "{{ c_auxiliary_appinfo }}"]
    c_env_list: ""
    envdict: {}


- name: Obtain the labels from the experiment
  shell: >
    kubectl get chaosexperiment -n {{ c_app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ c_experiment_name }}")].spec.definition.labels}' | sed 's/map//g' | tr -d [ | tr -d ] | tr ":" =
  args:
    executable: /bin/bash
  register: c_job_labels

- name: Fetching image from the chaosexperiment
  shell: >
    kubectl get chaosexperiment -n {{ c_app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ c_experiment_name }}")].spec.definition.image}'
  args:
    executable: /bin/bash
  register: c_image

- name: Obtain the args from the experiment
  shell: >
    kubectl get chaosexperiment -n {{ c_app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ c_experiment_name }}")].spec.definition.args[0]}{" \""}{.items[?(@.metadata.name=="{{ c_experiment_name }}")].spec.definition.args[1]}{"\""}'
  args:
    executable: /bin/bash
  register: c_job_args

- name: Check configmaps defined or not in chaos experiment.
  shell: >
    kubectl get chaosexperiment -n {{ c_app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ c_experiment_name }}")].spec.definition.configmaps}'
  args:
    executable: /bin/bash
  register: configMap_defined_experiment

- name: Check configmaps defined or not in chaos engine.
  shell: >
    kubectl get chaosengine {{ c_engine }} -n {{ c_app_ns }} -o jsonpath='{range .spec.experiments[?(@.name=="{{ c_experiment_name }}")]}{.spec.components.configMaps}'
  args:
    executable: /bin/bash
  register: configMap_defined_engine

- name: Check secrets defined or not in chaos experiment.
  shell: >
    kubectl get chaosexperiment -n {{ c_app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ c_experiment_name }}")].spec.definition.secrets}'
  args:
    executable: /bin/bash
  register: secret_defined_experiment

- name: Check secrets defined or not in chaos engine.
  shell: >
    kubectl get chaosengine {{ c_engine }} -n {{ c_app_ns }} -o jsonpath='{range .spec.experiments[?(@.name=="{{ c_experiment_name }}")]}{.spec.components.secrets}'
  args:
    executable: /bin/bash
  register: secret_defined_engine

- name: Record configmaps and secrets are defined or not.
  set_fact:
    configMap_defined_experiment: "{{ configMap_defined_experiment.stdout }}"
    configMap_defined_engine: "{{ configMap_defined_engine.stdout }}"
    secret_defined_experiment: "{{ secret_defined_experiment.stdout }}"
    secret_defined_engine: "{{ secret_defined_engine.stdout }}"

- include: experiment_env_getter.yml
  with_sequence: start=0 count="{{ c_env_length.stdout | int }}"

- name: Obtain the env param list length from spec of Engine
  shell: >
    kubectl get chaosengine {{ c_engine }} -o json 
    | jq '.spec.experiments[] | select(.name == "{{ c_experiment_name }}") | .spec.components.env | length'
  args:
    executable: /bin/bash
  register: c_engine_envlen

- include: engine_env_getter.yml
  with_sequence: start=0 count="{{ c_engine_envlen.stdout | int }}"

- name: merging appinfo from chaosengine
  set_fact: 
    envdict: "{{envdict | combine({\"APP_NAMESPACE\" : c_app_ns},{\"APP_LABEL\" : c_app_label},{\"APP_KIND\" : c_app_kind},{\"CHAOSENGINE\" : c_engine},{\"CHAOS_SERVICE_ACCOUNT\" : c_svc_acc},{\"AUXILIARY_APPINFO\" : c_auxiliary_appinfo})}}"

- name: Fetching env from dictionary
  set_fact:
    c_env_list: "{{ c_env_list + \" --env=\" + item.key + \"=\" + item.value }}"
  with_dict: "{{ envdict }}"

- name: display env lists
  debug:
    msg: "namelist: {{ envNameList }}, valuelist: {{ envValueList }}, maplist: {{ c_env_list }}"

- block:

    - name: Generate a simple random sleep duration
      set_fact: 
        rand_sleep: "{{ 180 | random }}"
      when: c_max is not defined

    - name: Generate a random sleep duration based on total chaos duration
      set_fact: 
        rand_sleep: "{{ (c_max|int / 4)|int | random }}"
      when: c_max is defined 
    
    - name: Sleep for random duration before triggering experiments
      wait_for:
        timeout: "{{ rand_sleep }}" 
      
  when: c_rand is defined and c_rand == "true" 

- debug:
    msg: "Triggering chaos experiment: {{c_experiment_name}} "

- name: genarate random string 
  shell: >
    cat /dev/urandom | tr -cd 'a-f0-9' | head -c 6
  args:
    executable: /bin/bash
  register: random_string

- name: Register the Job Name for further use
  set_fact:
    job_name: "{{ c_experiment_name }}-{{random_string.stdout}}"

- name: Run the chaos experiment job
  shell:
    kubectl run {{ job_name }} --restart=OnFailure --image={{ c_image.stdout }}
    --namespace={{ c_app_ns }} --serviceaccount={{ c_svc_acc }} --image-pull-policy=Always 
    --labels={{c_job_labels.stdout}} {{c_env_list}}  --command -- /bin/bash {{c_job_args.stdout}}  
  args:
    executable: /bin/bash
  when:  
    - configMap_defined_experiment == "[map[]]" or  configMap_defined_experiment == '' or configMap_defined_engine == "[map[]]" or  configMap_defined_engine == ''
    - secret_defined_experiment == "[map[]]"  or  secret_defined_experiment == '' or secret_defined_engine == "[map[]]"  or  secret_defined_engine == ''
  
- include: experiment_volumes.yml
  when: 
    - (configMap_defined_experiment != '' and  configMap_defined_experiment != "[map[]]" and configMap_defined_engine != '' and  configMap_defined_engine != "[map[]]") or (secret_defined_experiment != '' and  secret_defined_experiment != "[map[]]" and secret_defined_engine != '' and  secret_defined_engine != "[map[]]")

- name: Fetching monitoring time from chaos experiment job
  shell: >
    kubectl get job {{ job_name }} -n {{ c_app_ns }} -ojsonpath="{range .spec.template.spec.containers[*]}{.env[?(@.name=='TOTAL_CHAOS_DURATION')].value}"
  args:
    executable: /bin/bash
  register: chaos_monitoring_time

- name: Monitoring the litmus chaos job for completion
  shell: >
    kubectl get job {{ job_name }} -n {{ c_app_ns }} 
    --no-headers -o custom-columns=:status.conditions[].type | sort | uniq
  args:
   executable: /bin/bash
  register: c_job_status
  until: c_job_status.stdout == "Complete"
  delay: 2
  retries: "{{ (chaos_monitoring_time.stdout)|int + 300}}"

- name: Fetching verdict from the chaos result CR
  shell: >
     kubectl get chaosresult -n {{ c_app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ c_engine }}-{{ c_experiment_name }}")].spec.experimentstatus.verdict}'
  args:
   executable: /bin/bash
  register: c_verdict

- name: Fetching phase from the chaos result CR
  shell: >
     kubectl get chaosresult -n {{ c_app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ c_engine }}-{{ c_experiment_name }}")].spec.experimentstatus.phase}'
  args:
   executable: /bin/bash
  register: c_phase

- debug:
    msg: "verdict : {{c_verdict.stdout}}"

- name: Create jinja template from chaosengine yaml
  shell: >
    kubectl get chaosengine {{c_engine}} -n {{ c_app_ns }} -o yaml > chaos-engine.j2
  args:
    executable: /bin/bash

- name: patch experimentStatuses in jinja template for chaosengine
  lineinfile:
    dest: chaos-engine.j2
    state: present
    line: '{{item}}'
  with_items:
  - "status:"
  - "  experimentStatuses:"
  when:  experimentStatus_available.stdout == ''

- name: patch status in jinja template for chaosengine
  lineinfile:
    dest: chaos-engine.j2
    state: present
    line: '{{item}}'
  with_items:
  - "  - name: {{ '{{' }}experiment_name{{ '}}' }}"
  - "    instance: {{ '{{' }}job_name{{ '}}' }}"
  - "    status: {{ '{{' }}phase{{ '}}' }}"
  - "    verdict: {{ '{{' }}verdict{{ '}}' }}"

- name: Patch the chaosengine status
  template:
    src:  chaos-engine.j2
    dest: chaos-engine.yml
  vars:
    experiment_name: "{{ c_experiment_name}}"
    job_name: "{{ c_experiment_name }}-{{random_string.stdout}}"
    phase: "{{ c_phase.stdout }}" 
    verdict: "{{ c_verdict.stdout  }}"

- name: Apply the chaos engine CR
  shell: kubectl apply -f chaos-engine.yml -n {{ c_app_ns }}
  args:
    executable: /bin/bash

- name: Display chaos-engine yaml 
  shell: >
    kubectl get chaosengine {{ c_engine }} -n {{ c_app_ns }} -o yaml
  args:
    executable: /bin/bash
  register: c_engine_yaml

- debug:
    msg: "engine : {{ c_engine_yaml.stdout }}" 

- name: Get the jobCleanUpPolicy
  shell: >
    kubectl get chaosengine {{ c_engine }} -n {{ c_app_ns }} -o jsonpath='{.spec.jobCleanUpPolicy}'
  args:
    executable: /bin/bash
  register: jobCleanUpPolicy

- name: Delete job if the jobCleanUpPolicy status is delete
  shell: >
    kubectl delete job {{ job_name }} -n {{ c_app_ns }} 
  when: jobCleanUpPolicy.stdout == "delete"