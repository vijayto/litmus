---
- hosts: localhost
  connection: local

  vars:
    a_kind: "{{ '{{' }} lookup('env','APP_KIND') {{ '}}' }}"
    a_label: "{{ '{{' }} lookup('env','APP_LABEL') {{ '}}' }}"
    a_ns: "{{ '{{' }} lookup('env','APP_NAMESPACE') {{ '}}' }}"
    auxiliary_appinfo: "{{ '{{' }} lookup('env','AUXILIARY_APPINFO') {{ '}}' }}"
    c_duration: "{{ '{{' }} lookup('env','TOTAL_CHAOS_DURATION') {{ '}}' }}"
    c_experiment: {{ name }} 
    ramp_time: "{{ '{{' }} lookup('env','RAMP_TIME') {{ '}}' }}"
    chaos_pod_name: "{{ '{{' }} lookup('env','POD_NAME') {{ '}}' }}"
    chaos_uid: "{{ '{{' }} lookup('env','CHAOS_UID') {{ '}}' }}"
    c_engine: "{{ '{{' }} lookup('env','CHAOSENGINE') {{ '}}' }}"
    c_util: ""

  tasks:
    - block:

        - include: {{ name }}-ansible-prerequisites.yml
      
         ## GENERATE EXP RESULT NAME
        - name: Construct chaos result name
          set_fact:
            c_result: "{{ '{{' }} c_engine {{ '}}' }}-{{ '{{' }} c_experiment {{ '}}' }}"
          when: "c_engine is defined and c_engine != ''

        ## RECORD START-OF-EXPERIMENT IN LITMUSCHAOS RESULT CR
        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'SOT'
            namespace: "{{ '{{' }} a_ns {{ '}}' }}"

        ## PRE-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify that the AUT (Application Under Test) is running 
          include_tasks: "/utils/common/status_app_pod.yml"
          vars:
            app_ns: "{{ '{{' }} a_ns {{ '}}' }}" 
            app_label: "{{ '{{' }} a_label {{ '}}' }}"      
            delay: 1
            retries: 60

        # Auxiliary application health check status
        - block:
           
            - name: Record auxiliary appinfo 
              set_fact:
                auxiliary_appinfo_list: "{{ '{{' }} auxiliary_appinfo.split(',') {{ '}}' }}"
    
            - include: /utils/common/status_app_pod.yml
              vars:
                app_ns: "{{ '{{' }} item.split(':')[0] {{ '}}' }}"
                app_label: "{{ '{{' }} item.split(':')[1] {{ '}}' }}"
                delay: 5
                retries: 60
              with_items:
                - "{{ '{{' }} auxiliary_appinfo.split(',') {{ '}}' }}"
                
          when: auxiliary_appinfo is defined and auxiliary_appinfo != ''

        ## RECORD EVENT FOR PRE-CHAOS CHECK
        - include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
          vars:
            stage: "PreChaosCheck"
            exp_pod_name: "{{ '{{' }} chaos_pod_name {{ '}}' }}"
            engine_ns: "{{ '{{' }} a_ns {{ '}}' }}"
            message: "AUT is Running successfully"
          when: "c_engine is defined and c_engine != ''"

        ## FAULT INJECTION 

        - include_tasks: "{{ '{{' }} c_util {{ '}}' }}"
          vars:
            c_svc_acc: "{{ '{{' }} lookup('env','CHAOS_SERVICE_ACCOUNT') {{ '}}' }}"
          
        ## POST-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify AUT liveness post fault-injection
          include_tasks: "/utils/common/status_app_pod.yml"
          vars:
            app_ns: "{{ '{{' }} a_ns {{ '}}' }}" 
            app_label: "{{ '{{' }} a_label {{ '}}' }}" 
            delay: 1
            retries: 60

        # Auxiliary application health check status
        - block:
           
            - name: Record auxiliary appinfo 
              set_fact:
                auxiliary_appinfo_list: "{{ '{{' }} auxiliary_appinfo.split(',') {{ '}}' }}"
    
            - include: /utils/common/status_app_pod.yml
              vars:
                app_ns: "{{ '{{' }} item.split(':')[0] {{ '}}' }}"
                app_label: "{{ '{{' }} item.split(':')[1] {{ '}}' }}"
                delay: 5
                retries: 60
              with_items:
                - "{{ '{{' }} auxiliary_appinfo.split(',') {{ '}}' }}"
                
          when: auxiliary_appinfo is defined and auxiliary_appinfo != ''

        ## RECORD EVENT FOR POST-CHAOS CHECK
        - include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
          vars:
            stage: "PostChaosCheck"
            exp_pod_name: "{{ '{{' }} chaos_pod_name {{ '}}' }}"
            engine_ns: "{{ '{{' }} a_ns {{ '}}' }}"
            message: "AUT is Running successfully"
          when: "c_engine is defined and c_engine != ''"
        
        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 

        ## Getting failure step from experiment-pod
        - include_tasks: /utils/runtime/getting_failure_step.yml  
 
        ## RECORD END-OF-TEST IN LITMUSCHAOS RESULT CR
        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'EOT'
            namespace: "{{ '{{' }} a_ns {{ '}}' }}"