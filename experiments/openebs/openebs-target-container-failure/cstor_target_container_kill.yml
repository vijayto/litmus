---
- name: Pick the cstor target pod
  include_tasks: /utils/apps/openebs/fetch_cstor_target_pod.yml

- name: Get the restartCount of cstor-istgt container
  shell: >
    kubectl get pod {{ cstor_target_pod.stdout }} -n {{ openebs_ns }}
    -o=jsonpath='{.status.containerStatuses[?(@.name==''"{{ target_container }}"'')].restartCount}'
  args:
    executable: /bin/bash
  register: restartCount_before

# including pumba chaoslib -> pod-failure-by-sigkill
- include_tasks: /chaoslib/pumba/pod_failure_by_sigkill.yml
  vars:
    namespace: "{{ openebs_ns }}"
    app_pod: "{{ cstor_target_pod.stdout }}"
    app_container: "{{ target_container }}"
  when: cri == 'docker'

- include_tasks: /chaoslib/litmus/container_kill/containerd_chaos/crictl-chaos.yml
  vars:
    namespace: "{{ openebs_ns }}"
    app_pod: "{{ cstor_target_pod.stdout }}"
    app_container: "{{ target_container }}"
  when: cri == 'containerd'

- name: Check for target pod in running state
  shell: >
    kubectl get pod {{ cstor_target_pod.stdout }} -n {{ openebs_ns }} |
    grep -w "Running" | wc -l
  args:
    executable: /bin/bash
  register: cstor_target_pod_cnt
  until: "cstor_target_pod_cnt.stdout == \"1\""
  delay: 2
  retries: 90

- name: Get the runningStatus of target pod
  shell: >
    kubectl get pod {{ cstor_target_pod.stdout }} -n {{ openebs_ns }}
    -o=jsonpath='{range .status.containerStatuses[*]}{.state}{"\n"}{end}' |
    grep -w running | wc -l
  args:
    executable: /bin/bash
  register: runningStatusCount
  until: "runningStatusCount.stdout == \"3\""
  delay: 2
  retries: 90

- name: Get the restartCount of cstor-istgt container
  shell: >
    kubectl get pod {{ cstor_target_pod.stdout }} -n {{ openebs_ns }}
    -o=jsonpath='{.status.containerStatuses[?(@.name==''"{{ target_container }}"'')].restartCount}'
  args:
    executable: /bin/bash
  register: restartCount_after

- name: Compare restartCounts
  debug:
    msg:
      - "Verified pool pods were restarted by fault injection"
      - "Before: {{ restartCount_before.stdout }}"
      - "After: {{ restartCount_after.stdout }}"
  failed_when: "{{ restartCount_after.stdout|int }} <= {{ restartCount_before.stdout|int }}"